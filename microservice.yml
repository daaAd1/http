omg: 1
info:
  version: 1.0.0
  title: HTTP Gateway
  description: |
    Make http calls and listen for http connections through the Asyncy Gateway
    resulting in serverless http endpoints.
  license:
    name: Apache 2.0
    url: https://opensource.org/licenses/Apache-2.0
actions:
  fetch:
    help: |
      Make a HTTP request to the outside world.
      This command is native to the platform for performance reasons.
    arguments:
      method: &method
        type: string
        in: requestBody
        default: get
        enum:
        - get
        - post
        - patch
        - delete
        - put
        - options
      url:
        type: string
        in: requestBody
        required: true
      query:
        help: |
          Set an optional map of query parameters.
          Query parameters are automatically appended to the url specified (/url?foo=bar&john=doe)
        type: map
        in: requestBody
      headers:
        type: map
        in: requestBody
      body:
        type: any
        in: requestBody
    output:
      type: any
  server:
    events:
      listen:
        help: |
          Listen and respond to http connections by
          registering with the Asyncy Gateway resulting in a serverless function.
        arguments:
          method:
            <<: *method
          path:
            type: string
            in: requestBody
            required: true
        http:
          port: 8889
          subscribe:
            path: /register
            contentType: application/json
            method: post
          unsubscribe:
            path: /unregister
            method: post
        output:
          type: object
          contentType: application/json
          properties:
            body:
              help: The JSON body of the incoming HTTP request
              type: map
            headers:
              help: The HTTP headers of the incoming HTTP request
              type: map
            query_params:
              help: The parsed query parameters of the HTTP request
              type: map
            uri:
              help: The URI of the incoming HTTP request
              type: string
            path:
              help: The path portion of th URI of the incoming HTTP request
              type: string
          actions:
            write:
              http: &response_http
                contentType: application/json
                use_event_conn: true
              arguments:
                content:
                  type: string
                  in: responseBody
                  required: true
                flush:
                  type: boolean
                  in: responseBody
                  required: false
            redirect:
              help: Redirect the incoming URL. No additional actions may be used after executing this command.
              http:
                <<: *response_http
              arguments:
                url:
                  type: string
                  in: responseBody
                  required: true
                query:
                  help: These query parameters are appended to the URL specified.
                  type: map
                  in: responseBody
            flush:
              http:
                <<: *response_http
            get_header:
              http:
                <<: *response_http
              arguments:
                key:
                  type: string
                  in: responseBody
                  required: true
            set_header:
              http:
                <<: *response_http
              arguments:
                key:
                  type: string
                  in: responseBody
                  required: true
                value:
                  type: string
                  in: responseBody
                  required: true
            set_status:
              http:
                <<: *response_http
              arguments:
                code:
                  type: int
                  in: responseBody
                  required: true
            finish:
              http:
                <<: *response_http
    output:
      type: any
